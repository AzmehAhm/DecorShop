import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Plus, Pencil, Trash2, Check, X, Search } from "lucide-react";
import { PriceList, ProductVariant } from "@/types/product";

interface PriceListManagerProps {
  onClose?: () => void;
}

const PriceListManager = ({ onClose = () => {} }: PriceListManagerProps) => {
  // Mock data - in a real app, this would be fetched from the database
  const [priceLists, setPriceLists] = useState<PriceList[]>([
    {
      id: "1",
      name: "Standard",
      description: "Default price list for all customers",
      isDefault: true,
    },
    {
      id: "2",
      name: "Wholesale",
      description: "Discounted prices for wholesale customers",
      isDefault: false,
    },
    {
      id: "3",
      name: "VIP",
      description: "Special prices for VIP customers",
      isDefault: false,
    },
  ]);

  const [productVariants, setProductVariants] = useState<ProductVariant[]>([
    {
      id: "1",
      productId: "1",
      sku: "SHIRT-S-RED",
      sizeName: "Small",
      colorName: "Red",
      stockLevel: 10,
      reorderPoint: 5,
      price: 19.99,
    },
    {
      id: "2",
      productId: "1",
      sku: "SHIRT-M-RED",
      sizeName: "Medium",
      colorName: "Red",
      stockLevel: 15,
      reorderPoint: 5,
      price: 19.99,
    },
    {
      id: "3",
      productId: "1",
      sku: "SHIRT-L-RED",
      sizeName: "Large",
      colorName: "Red",
      stockLevel: 8,
      reorderPoint: 5,
      price: 19.99,
    },
    {
      id: "4",
      productId: "2",
      sku: "PANTS-S-BLUE",
      sizeName: "Small",
      colorName: "Blue",
      stockLevel: 12,
      reorderPoint: 5,
      price: 29.99,
    },
    {
      id: "5",
      productId: "2",
      sku: "PANTS-M-BLUE",
      sizeName: "Medium",
      colorName: "Blue",
      stockLevel: 18,
      reorderPoint: 5,
      price: 29.99,
    },
  ]);

  // State for price list management
  const [selectedPriceList, setSelectedPriceList] = useState<PriceList | null>(
    null,
  );
  const [isAddPriceListDialogOpen, setIsAddPriceListDialogOpen] =
    useState(false);
  const [isEditPriceListDialogOpen, setIsEditPriceListDialogOpen] =
    useState(false);
  const [isDeletePriceListDialogOpen, setIsDeletePriceListDialogOpen] =
    useState(false);
  const [newPriceListName, setNewPriceListName] = useState("");
  const [newPriceListDescription, setNewPriceListDescription] = useState("");
  const [newPriceListIsDefault, setNewPriceListIsDefault] = useState(false);

  // State for price management
  const [activeTab, setActiveTab] = useState("price-lists");
  const [selectedPriceListForPrices, setSelectedPriceListForPrices] =
    useState<string>("1");
  const [searchTerm, setSearchTerm] = useState("");
  const [editingPrices, setEditingPrices] = useState<Record<string, number>>(
    {},
  );
  const [isEditingPrices, setIsEditingPrices] = useState(false);

  // Filter variants based on search term
  const filteredVariants = productVariants.filter((variant) =>
    variant.sku.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  // Add a new price list
  const handleAddPriceList = () => {
    if (!newPriceListName.trim()) return;

    const newPriceList: PriceList = {
      id: `${priceLists.length + 1}`, // In a real app, this would be generated by the database
      name: newPriceListName.trim(),
      description: newPriceListDescription.trim(),
      isDefault: newPriceListIsDefault,
    };

    // If the new price list is set as default, update other price lists
    let updatedPriceLists = [...priceLists];
    if (newPriceListIsDefault) {
      updatedPriceLists = updatedPriceLists.map((pl) => ({
        ...pl,
        isDefault: false,
      }));
    }

    setPriceLists([...updatedPriceLists, newPriceList]);
    resetPriceListForm();
    setIsAddPriceListDialogOpen(false);
  };

  // Edit an existing price list
  const handleEditPriceList = () => {
    if (!selectedPriceList || !newPriceListName.trim()) return;

    // If the edited price list is set as default, update other price lists
    let updatedPriceLists = priceLists.map((pl) =>
      pl.id === selectedPriceList.id
        ? {
            ...pl,
            name: newPriceListName.trim(),
            description: newPriceListDescription.trim(),
            isDefault: newPriceListIsDefault,
          }
        : newPriceListIsDefault
          ? { ...pl, isDefault: false }
          : pl,
    );

    setPriceLists(updatedPriceLists);
    resetPriceListForm();
    setIsEditPriceListDialogOpen(false);
  };

  // Delete a price list
  const handleDeletePriceList = () => {
    if (!selectedPriceList) return;

    // Don't allow deleting the default price list
    if (selectedPriceList.isDefault) {
      alert("Cannot delete the default price list.");
      return;
    }

    const updatedPriceLists = priceLists.filter(
      (pl) => pl.id !== selectedPriceList.id,
    );

    setPriceLists(updatedPriceLists);
    setSelectedPriceList(null);
    setIsDeletePriceListDialogOpen(false);
  };

  // Reset price list form
  const resetPriceListForm = () => {
    setNewPriceListName("");
    setNewPriceListDescription("");
    setNewPriceListIsDefault(false);
    setSelectedPriceList(null);
  };

  // Open edit dialog and set selected price list
  const openEditPriceListDialog = (priceList: PriceList) => {
    setSelectedPriceList(priceList);
    setNewPriceListName(priceList.name);
    setNewPriceListDescription(priceList.description || "");
    setNewPriceListIsDefault(priceList.isDefault);
    setIsEditPriceListDialogOpen(true);
  };

  // Open delete dialog and set selected price list
  const openDeletePriceListDialog = (priceList: PriceList) => {
    setSelectedPriceList(priceList);
    setIsDeletePriceListDialogOpen(true);
  };

  // Start editing prices
  const startEditingPrices = () => {
    // Initialize editing prices with current prices
    const initialPrices: Record<string, number> = {};
    productVariants.forEach((variant) => {
      initialPrices[variant.id] = variant.price || 0;
    });
    setEditingPrices(initialPrices);
    setIsEditingPrices(true);
  };

  // Save edited prices
  const saveEditedPrices = () => {
    // Update product variants with new prices
    const updatedVariants = productVariants.map((variant) => ({
      ...variant,
      price: editingPrices[variant.id] || variant.price,
    }));

    setProductVariants(updatedVariants);
    setIsEditingPrices(false);
  };

  // Cancel editing prices
  const cancelEditingPrices = () => {
    setIsEditingPrices(false);
    setEditingPrices({});
  };

  // Handle price change
  const handlePriceChange = (variantId: string, price: string) => {
    setEditingPrices({
      ...editingPrices,
      [variantId]: parseFloat(price) || 0,
    });
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <div className="flex justify-between items-center">
          <div>
            <CardTitle>Price List Management</CardTitle>
            <CardDescription>
              Manage price lists and set prices for product variants
            </CardDescription>
          </div>
          <Button onClick={onClose} variant="outline">
            Close
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="mb-6">
            <TabsTrigger value="price-lists">Price Lists</TabsTrigger>
            <TabsTrigger value="prices">Variant Prices</TabsTrigger>
          </TabsList>

          <TabsContent value="price-lists">
            <div className="flex justify-between items-center mb-6">
              <div>
                <h3 className="text-lg font-medium">Available Price Lists</h3>
              </div>
              <Dialog
                open={isAddPriceListDialogOpen}
                onOpenChange={setIsAddPriceListDialogOpen}
              >
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="mr-2 h-4 w-4" /> Add Price List
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Add New Price List</DialogTitle>
                    <DialogDescription>
                      Create a new price list for your products
                    </DialogDescription>
                  </DialogHeader>
                  <div className="grid gap-4 py-4">
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label htmlFor="price-list-name" className="text-right">
                        Name
                      </Label>
                      <Input
                        id="price-list-name"
                        value={newPriceListName}
                        onChange={(e) => setNewPriceListName(e.target.value)}
                        className="col-span-3"
                        placeholder="e.g., Standard, Wholesale, etc."
                      />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label
                        htmlFor="price-list-description"
                        className="text-right"
                      >
                        Description
                      </Label>
                      <Textarea
                        id="price-list-description"
                        value={newPriceListDescription}
                        onChange={(e) =>
                          setNewPriceListDescription(e.target.value)
                        }
                        className="col-span-3"
                        placeholder="Optional description"
                      />
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <Label
                        htmlFor="price-list-default"
                        className="text-right"
                      >
                        Default
                      </Label>
                      <div className="flex items-center space-x-2 col-span-3">
                        <Switch
                          id="price-list-default"
                          checked={newPriceListIsDefault}
                          onCheckedChange={setNewPriceListIsDefault}
                        />
                        <Label htmlFor="price-list-default">
                          Set as default price list
                        </Label>
                      </div>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button
                      variant="outline"
                      onClick={() => {
                        resetPriceListForm();
                        setIsAddPriceListDialogOpen(false);
                      }}
                    >
                      Cancel
                    </Button>
                    <Button onClick={handleAddPriceList}>Add Price List</Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Default</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {priceLists.length > 0 ? (
                    priceLists.map((priceList) => (
                      <TableRow key={priceList.id}>
                        <TableCell className="font-medium">
                          {priceList.name}
                        </TableCell>
                        <TableCell>{priceList.description}</TableCell>
                        <TableCell>
                          {priceList.isDefault ? (
                            <div className="flex items-center">
                              <Check className="h-4 w-4 text-green-500 mr-1" />
                              <span>Default</span>
                            </div>
                          ) : (
                            <X className="h-4 w-4 text-gray-300" />
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => openEditPriceListDialog(priceList)}
                            >
                              <Pencil className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() =>
                                openDeletePriceListDialog(priceList)
                              }
                              disabled={priceList.isDefault}
                            >
                              <Trash2
                                className={`h-4 w-4 ${priceList.isDefault ? "text-gray-300" : "text-red-500"}`}
                              />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={4}
                        className="text-center py-6 text-gray-500"
                      >
                        No price lists found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </TabsContent>

          <TabsContent value="prices">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
              <div className="flex flex-col md:flex-row gap-4 w-full md:w-auto">
                <Select
                  value={selectedPriceListForPrices}
                  onValueChange={setSelectedPriceListForPrices}
                >
                  <SelectTrigger className="w-full md:w-[200px]">
                    <SelectValue placeholder="Select price list" />
                  </SelectTrigger>
                  <SelectContent>
                    {priceLists.map((pl) => (
                      <SelectItem key={pl.id} value={pl.id}>
                        {pl.name}
                        {pl.isDefault ? " (Default)" : ""}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <div className="relative w-full md:w-[300px]">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by SKU"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-8"
                  />
                </div>
              </div>

              <div>
                {isEditingPrices ? (
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={cancelEditingPrices}
                      className="flex items-center"
                    >
                      <X className="mr-2 h-4 w-4" /> Cancel
                    </Button>
                    <Button
                      onClick={saveEditedPrices}
                      className="flex items-center"
                    >
                      <Check className="mr-2 h-4 w-4" /> Save Prices
                    </Button>
                  </div>
                ) : (
                  <Button onClick={startEditingPrices}>
                    <Pencil className="mr-2 h-4 w-4" /> Edit Prices
                  </Button>
                )}
              </div>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>SKU</TableHead>
                    <TableHead>Size</TableHead>
                    <TableHead>Color</TableHead>
                    <TableHead className="text-right">Price</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredVariants.length > 0 ? (
                    filteredVariants.map((variant) => (
                      <TableRow key={variant.id}>
                        <TableCell className="font-medium">
                          {variant.sku}
                        </TableCell>
                        <TableCell>{variant.sizeName}</TableCell>
                        <TableCell>{variant.colorName}</TableCell>
                        <TableCell className="text-right">
                          {isEditingPrices ? (
                            <Input
                              type="number"
                              step="0.01"
                              min="0"
                              value={
                                editingPrices[variant.id] || variant.price || 0
                              }
                              onChange={(e) =>
                                handlePriceChange(variant.id, e.target.value)
                              }
                              className="w-24 ml-auto"
                            />
                          ) : (
                            <span>${variant.price?.toFixed(2) || "0.00"}</span>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={4}
                        className="text-center py-6 text-gray-500"
                      >
                        No product variants found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </TabsContent>
        </Tabs>

        {/* Edit Price List Dialog */}
        <Dialog
          open={isEditPriceListDialogOpen}
          onOpenChange={setIsEditPriceListDialogOpen}
        >
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Price List</DialogTitle>
              <DialogDescription>
                Update the details of this price list
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-price-list-name" className="text-right">
                  Name
                </Label>
                <Input
                  id="edit-price-list-name"
                  value={newPriceListName}
                  onChange={(e) => setNewPriceListName(e.target.value)}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label
                  htmlFor="edit-price-list-description"
                  className="text-right"
                >
                  Description
                </Label>
                <Textarea
                  id="edit-price-list-description"
                  value={newPriceListDescription}
                  onChange={(e) => setNewPriceListDescription(e.target.value)}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-price-list-default" className="text-right">
                  Default
                </Label>
                <div className="flex items-center space-x-2 col-span-3">
                  <Switch
                    id="edit-price-list-default"
                    checked={newPriceListIsDefault}
                    onCheckedChange={setNewPriceListIsDefault}
                    disabled={selectedPriceList?.isDefault}
                  />
                  <Label htmlFor="edit-price-list-default">
                    Set as default price list
                  </Label>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => {
                  resetPriceListForm();
                  setIsEditPriceListDialogOpen(false);
                }}
              >
                Cancel
              </Button>
              <Button onClick={handleEditPriceList}>Save Changes</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog
          open={isDeletePriceListDialogOpen}
          onOpenChange={setIsDeletePriceListDialogOpen}
        >
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Confirm Deletion</DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <p>
                Are you sure you want to delete the price list "
                {selectedPriceList?.name}"?
              </p>
              <p className="text-sm text-gray-500 mt-1">
                This action cannot be undone. Customers using this price list
                will be affected.
              </p>
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => setIsDeletePriceListDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button variant="destructive" onClick={handleDeletePriceList}>
                Delete
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
};

export default PriceListManager;
